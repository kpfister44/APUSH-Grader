/**
 * PDF Results Page Component - Page 1 of the PDF export
 * Contains grading results, scores, feedback, and suggestions
 */
import React from 'react';
import { Page, Text, View } from '@react-pdf/renderer';
import { GradingResponse, EssayType } from '../../types/api';
import { pdfStyles, getScoreColor, formatSectionTitle } from './PDFStyles';

interface PDFResultsPageProps {
  result: GradingResponse;
  essayType: EssayType;
}

export const PDFResultsPage: React.FC<PDFResultsPageProps> = ({
  result,
  essayType
}) => {
  return (
    <Page size="A4" style={pdfStyles.page}>
      {/* Page Header */}
      <Text style={pdfStyles.pageHeader}>
        APUSH Grader - Essay Results
      </Text>

      {/* Score Summary Section */}
      <View style={pdfStyles.scoreContainer}>
        <View>
          <Text style={pdfStyles.scoreText}>
            {essayType} Essay: {result.score}/{result.max_score}
          </Text>
          <Text style={pdfStyles.gradeText}>
            {result.letter_grade} - {result.performance_level}
          </Text>
        </View>
        <View>
          <Text style={[pdfStyles.scoreText, { 
            color: getScoreColor(result.score, result.max_score) 
          }]}>
            {result.percentage.toFixed(1)}%
          </Text>
        </View>
      </View>

      {/* Overall Feedback */}
      {result.overall_feedback && (
        <View>
          <Text style={pdfStyles.sectionHeader}>Overall Feedback</Text>
          <View style={pdfStyles.feedbackContainer}>
            <Text style={pdfStyles.feedbackText}>
              {result.overall_feedback}
            </Text>
          </View>
        </View>
      )}

      {/* Detailed Score Breakdown */}
      <Text style={pdfStyles.sectionHeader}>Detailed Score Breakdown</Text>
      
      <View style={pdfStyles.table}>
        {/* Table Header */}
        <View style={[pdfStyles.tableRow, pdfStyles.tableHeader]}>
          <View style={pdfStyles.tableColWide}>
            <Text style={pdfStyles.tableCell}>Section</Text>
          </View>
          <View style={pdfStyles.tableColNarrow}>
            <Text style={pdfStyles.tableCell}>Score</Text>
          </View>
          <View style={pdfStyles.tableColWide}>
            <Text style={pdfStyles.tableCell}>Feedback</Text>
          </View>
        </View>

        {/* Table Rows */}
        {Object.entries(result.breakdown).map(([section, details]) => (
          <View style={pdfStyles.tableRow} key={section}>
            <View style={pdfStyles.tableColWide}>
              <Text style={pdfStyles.tableCell}>
                {formatSectionTitle(section)}
              </Text>
            </View>
            <View style={pdfStyles.tableColNarrow}>
              <Text style={[pdfStyles.tableCell, {
                color: getScoreColor(details.score, details.max_score)
              }]}>
                {details.score}/{details.max_score}
              </Text>
            </View>
            <View style={pdfStyles.tableColWide}>
              <Text style={pdfStyles.tableCell}>
                {details.feedback}
              </Text>
            </View>
          </View>
        ))}
      </View>

      {/* Improvement Suggestions */}
      {result.suggestions && result.suggestions.length > 0 && (
        <View>
          <Text style={pdfStyles.sectionHeader}>Improvement Suggestions</Text>
          <View style={pdfStyles.listContainer}>
            {result.suggestions.map((suggestion, index) => (
              <View style={pdfStyles.listItem} key={index}>
                <Text style={pdfStyles.listBullet}>•</Text>
                <Text style={pdfStyles.listText}>{suggestion}</Text>
              </View>
            ))}
          </View>
        </View>
      )}

      {/* Processing Warnings */}
      {result.warnings && result.warnings.length > 0 && (
        <View>
          <Text style={pdfStyles.sectionHeader}>Processing Notes</Text>
          <View style={pdfStyles.warningContainer}>
            {result.warnings.map((warning, index) => (
              <Text key={index} style={pdfStyles.warningText}>
                • {warning}
              </Text>
            ))}
          </View>
        </View>
      )}

      {/* Essay Statistics */}
      <View style={{ marginTop: 'auto' }}>
        <Text style={pdfStyles.sectionHeader}>Essay Statistics</Text>
        <View style={pdfStyles.feedbackContainer}>
          <Text style={pdfStyles.feedbackText}>
            Word Count: {result.word_count} | Paragraphs: {result.paragraph_count}
            {result.processing_time_ms && 
              ` | Processing Time: ${(result.processing_time_ms / 1000).toFixed(1)}s`
            }
          </Text>
        </View>
      </View>

      {/* Footer */}
      <Text style={pdfStyles.footer}>
        Page 1 of 2 - Generated by APUSH Grader
      </Text>
    </Page>
  );
};